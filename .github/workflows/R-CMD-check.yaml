on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '3.6'}
          - {os: macOS-latest, r: '3.6'}
          - {os: macOS-latest, r: 'devel'}
          #- {os: ubuntu-16.04, r: '3.2', rspm: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
          #- {os: ubuntu-16.04, r: '3.3', rspm: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
          #- {os: ubuntu-16.04, r: '3.4', rspm: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
          #- {os: ubuntu-16.04, r: '3.5', rspm: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
          - {os: ubuntu-16.04, r: '3.6', rspm: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}

    env:
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      # macOS >= 10.15.4 linking
      SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: Setup R
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - name: Setup pandoc
        uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies [Linux and macOS]
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: RETICULATE_PYTHON setting
        run: |
          reticulate_dir <- path.expand("~/.Renviron")
          fileConn <- file(reticulate_dir)
          pyPATH <- Sys.getenv("pythonLocation")
          writeLines(sprintf('RETICULATE_PYTHON="%s"', pyPATH), fileConn)
          close(fileConn)
        shell: Rscript {0}

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools earthengine-api numpy virtualenv

      - name: Cache R packages [LINUX and macOS]
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install system dependencies [LINUX]
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          sudo apt install libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
          libv8-3.14-dev libjq-dev libnetcdf-dev libjson-c-dev
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: Brew and macOS config
        if: runner.os == 'macOS'
        run: |
          brew install udunits
          brew install gdal
          cat <<EOT >> .Renviron
          PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
          PROJ_LIB=/usr/local/opt/proj/share/proj/
          EOT
          cat <<EOT >> .Rprofile
          config_args <- c("sf" = "--with-proj-lib=/usr/local/lib/", "rgdal" = "--with-proj-lib=/usr/local/lib/ --with-proj-include=/usr/local/include/")
          r <- getOption("repos")
          r["CRAN"] <- "https://cran.rstudio.com"
          options(configure.args = config_args, repos = r)
          EOT

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}


      - name: Install rgdal with configure [macOS]
        if: runner.os == 'macOS'
        run: |
          install.packages("rgdal", type = "source", configure.args = "--with-proj-lib=/usr/local/lib/ --with-proj-include=/usr/local/include/")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--no-examples"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
