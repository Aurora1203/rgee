% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ee_stars.R
\name{ee_as_stars}
\alias{ee_as_stars}
\title{Convert an Earth Engine (EE) image in a stars object}
\usage{
ee_as_stars(image, region, scale = NULL, geodesic = NULL,
  evenOdd = NULL, maxPixels = 1e+09, monitoring = TRUE,
  via = "getInfo", container = "rgee_backup", quiet = FALSE)
}
\arguments{
\item{image}{ee$Image to be converted into a sf object}

\item{region}{EE Geometry Rectangle (ee$Geometry$Rectangle). The
CRS needs to be the same that the x argument otherwise it will be
forced. If it is not specified image bounds will be taken.}

\item{scale}{The resolution in meters per pixel. If scale
is NULL, the native resolution of the first band will be
taken.}

\item{geodesic}{Whether line segments of region should be interpreted as
spherical geodesics. If FALSE, indicates that line segments should be
interpreted as planar lines in the specified CRS. If it is not specified in
the geometry (region argument) defaults to TRUE if the CRS is geographic
(including the default EPSG:4326), or to FALSE if the CRS is projected.}

\item{evenOdd}{If TRUE, polygon interiors will be determined by
the even/odd rule, where a point is inside if it crosses an odd
number of edges to reach a point at infinity. Otherwise polygons
use the left- inside rule, where interiors are on the left side
of the shell's edges when walking the vertices in the given order.
If unspecified in the geometry (region argument) defaults to FALSE.}

\item{maxPixels}{The maximum allowed number of pixels in the
exported image. The task will fail if the exported region covers
more pixels in the specified projection. Defaults to 100,000,000.}

\item{monitoring}{Relevant when the "via" argument is
defined as 'drive' or 'gcs'.If it is FALSE, ee_as_stars will wait
until the task is finished.}

\item{via}{Method to download the image. Three methods
are implemented 'getInfo', 'drive' and 'gcs'. See details.}

\item{container}{Relevant when the "via" argument is
defined as 'drive' or 'gcs'. It is the name of a unique
folder ('drive') or bucket ('gcs') to export into.}

\item{quiet}{logical. Suppress info message}
}
\value{
A stars object, when via argument was defined as 'getInfo'. For
other cases will return a stars-proxy object.
}
\description{
Convert an Earth Engine (EE) image in a stars object
}
\details{
The process to pass a ee$Image to your local env could be carried
out by three different strategies. The first one ('getInfo') use the getInfo
method, which fetch and return information about Earth Engine
objects, the advantage of use this is a direct and fast download.
However, there is a limit of 262144 pixels (512x512) that can
be transferred by request which makes it unsatisfactory for large images.
The second ('drive') and third ('gcs') method are suitable for large images
since it use Google Drive and Google Cloud Storage as a intermidiate
container.
}
\examples{
library(raster)
library(stars)
library(rgee)
# Initialize a specific Earth Engine account and
# load Google Drive and Google Cloud Storage credentials
ee_reattach()
ee_Initialize(
  email = "data.colec.fbf@gmail.com",
  drive = TRUE,
  gcs = TRUE
)

# Define an image.
img <- ee$Image("LANDSAT/LC08/C01/T1_SR/LC08_038029_20180810")$
  select(c("B4", "B5", "B6"))
Map$centerObject(img)
Map$addLayer(img)

# Define an area of interest.
geometry <- ee$Geometry$Rectangle(c(-110.8, 44.6, -110.6, 44.7))

## getInfo - Method 01
img_stars_01 <- ee_as_stars(
  image = img,
  region = geometry,
  via = "getInfo"
)
## drive - Method 02
img_stars_02 <- ee_as_stars(
  image = img,
  region = geometry,
  via = "drive"
)
## gcs - Method 03
img_stars_03 <- ee_as_stars(
  image = img,
  region = geometry,
  container = "rgee_dev",
  via = "gcs"
)
}
