% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ee_map.R
\name{ee_map}
\alias{ee_map}
\alias{ee_map.default}
\alias{ee_map.ee.geometry.Geometry}
\alias{ee_map.ee.feature.Feature}
\alias{ee_map.ee.featurecollection.FeatureCollection}
\alias{ee_map.ee.image.Image}
\alias{ee_map.ee.imagecollection.ImageCollection}
\title{Adds a given EE object to mapview as a layer.}
\usage{
ee_map(eeobject, vizparams, center, zoom_start = 8, objname = "map",
  max_nimage = 10, ...)

\method{ee_map}{default}(eeobject, ...)

\method{ee_map}{ee.geometry.Geometry}(eeobject, vizparams, center,
  zoom_start = 8, objname = "map", ...)

\method{ee_map}{ee.feature.Feature}(eeobject, vizparams, center,
  zoom_start = 8, objname = "map", ...)

\method{ee_map}{ee.featurecollection.FeatureCollection}(eeobject,
  vizparams, center, zoom_start = 8, objname = "map", ...)

\method{ee_map}{ee.image.Image}(eeobject, vizparams, center,
  zoom_start = 2, objname = "map", ...)

\method{ee_map}{ee.imagecollection.ImageCollection}(eeobject, vizparams,
  center, zoom_start = 2, objname = "map", max_nimage = 10, ...)
}
\arguments{
\item{eeobject}{EE object.}

\item{vizparams}{list; visualization parameters. See Details.}

\item{center}{character vector; the longitude and latitude of the map center.}

\item{zoom_start}{zoom level.}

\item{objname}{character vector; name of the map(or maps).}

\item{max_nimage}{Max number of Image to display.}

\item{...}{ignored}
}
\description{
Display a given EE object (Geometry, Image, Feature, FeatureCollection
or ImageCollection) using the \code{\link[mapview]{mapview}} style.
}
\details{
\code{ee_map} takes advantage of the getMapId function for generating a provisial
WMS service supported by Google Earth Engine. To achieve desirable visualization effects, it is
depend on the type of EE object. For neither Image or ImageCollection, you can provide visualization parameters to ee_map by
the parameter vizparams. The
\href{https://developers.google.com/earth-engine/image_visualization}{parameters} available are:

\tabular{lll}{
\strong{Parameter}\tab \strong{Description}\tab\strong{Type}\cr
\strong{bands}     \tab  Comma-delimited list of three band names to be mapped to RGB                \tab  list                                               \cr
\strong{min}       \tab  Value(s) to map to 0                                                        \tab  number or list of three numbers, one for each band \cr
\strong{max}       \tab  Value(s) to map to 255                                                      \tab  number or list of three numbers, one for each band \cr
\strong{gain}      \tab  Value(s) by which to multiply each pixel value                              \tab  number or list of three numbers, one for each band \cr
\strong{bias}      \tab  Value(s) to add to each DN                                                  \tab  number or list of three numbers, one for each band \cr
\strong{gamma}     \tab  Gamma correction factor(s)                                                  \tab  number or list of three numbers, one for each band \cr
\strong{palette}  \tab  List of CSS-style color strings (single-band images only)                   \tab  comma-separated list of hex strings                \cr
\strong{opacity}   \tab  The opacity of the layer (0.0 is fully transparent and 1.0 is fully opaque) \tab  number                                             \cr
\strong{format}    \tab  Either "jpg" or "png"                                                       \tab  string \cr
}

If you add a EE Image or ImageCollection object to the map without any additional parameters,
by default \code{ee_map} assigns the first three bands to red, green and blue, respectively.
The default stretch is based on the mixmax range ,  which may or may not be suitable.
In the case of Geometry, Feature or FeatureCollection objects vizparams allow the next parameters:

\itemize{
\item color: A hex string in the format RRGGBB specifying the color to use for drawing the features.
By default 000000.
\item pointRadius: The radius of the point markers. By default 3.
\item strokeWidth: The width of lines and polygon borders. By default 3.
}
}
\examples{
\dontrun{
library(rgee)
ee_initialize()

# Case: Geometry*
geom <- ee$Geometry$Point(list(-73.53522, -15.75453))
m1 <- ee_map(geom,list(pointRadius=10,color="FF0000"), objname = "Geometry-Arequipa")
m1

# Case: Feature
eeobject_fc <- ee$FeatureCollection("users/csaybar/DLdemos/train_set")$first()
m2 <- ee_map(ee$Feature(eeobject_fc), objname = "Feature-Arequipa")
m2 + m1

# Case: FeatureCollection
eeobject_fc <- ee$FeatureCollection("users/csaybar/DLdemos/train_set")
m3 <- ee_map(eeobject_fc,objname = 'FeatureCollection')
m3+m1

# Case: Image
image <- ee$Image("LANDSAT/LC08/C01/T1/LC08_044034_20140318")
m4 <- ee_map(image,list(bands = c('B4','B3','B2'), max=10000),objname = "Image")
m4+m1

# Case: ImageCollection
collection <- ee$ImageCollection("LANDSAT/LC08/C01/T1_TOA")$
  filter(ee$Filter()$eq("WRS_PATH", 44))$
  filter(ee$Filter()$eq("WRS_ROW", 34))$
  filterDate("2014-01-01", "2015-01-01")$
  sort("CLOUD_COVER")

m5 <- ee_map(eeobject = collection,
             vizparams = list(bands = c('B4','B3','B2'), max=1),
             #objname = "ImageCollection",
             objname = c("Scene_2019","Scene_2016","Scene_2011"),
             max_nimage = 3)

m5 + m1 + m2 + m3 + m4
}
}
