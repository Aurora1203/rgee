% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ee_as_ee.R
\name{ee_as_ee}
\alias{ee_as_ee}
\alias{ee_as_ee.character}
\alias{ee_as_ee.sf}
\alias{ee_as_ee.sfc}
\alias{ee_as_ee.sfg}
\alias{ee_as_ee.Spatial}
\title{Convert R spatial object to an Earth Engine object}
\usage{
ee_as_ee(x, ...)

\method{ee_as_ee}{character}(x, ...)

\method{ee_as_ee}{sf}(x, ...)

\method{ee_as_ee}{sfc}(x, ...)

\method{ee_as_ee}{sfg}(x, ...)

\method{ee_as_ee}{Spatial}(x, ...)
}
\arguments{
\item{x}{objet to be converted into an Earth Engine object.}

\item{...}{if x is a character additional \code{\link[sf]{st_read}} arguments could be passed.}
}
\description{
Convert R spatial object to an Earth Engine object
}
\details{
\code{ee_as_ee} try to transform R objects into a GeoJSON format. By the time a user sends an HTTP
request to the Earth Engine Web REST APIs (by, e.g. using *$getInfo()), the GeoJSON will be
encrusted to the message. Therefore, it is expected that large spatial objects (>500Kb) cause
bottlenecks and plodding connections. See
\href{https://developers.google.com/earth-engine/client_server#client-and-server-functions}{Client vs Server}
documentation for details. For leading with very large spatial objects, is a good practice firstly
importing it to the GEE assets. See \code{\link[rgee]{ee_upload_toasset}} for details.
}
\examples{
\dontrun{
library(rgee)
ee_initialize()

# character
x <- system.file("shape/nc.shp", package="sf")
ee$FeatureCollection(ee_as_ee(x),proj="EPSG:4326")

# matrix
ee_df <- matrix(rnorm(100),ncol = 5) \%>\% as.data.frame()
ee_df <- ee_as_ee(ee_df,c("V1","V2"))

ee_df$geometry()
# sf
x <- read_sf(system.file("shape/nc.shp", package="sf"))
st_crs
ee_as_ee(x)

#sfc
x <- read_sf(system.file("shape/nc.shp", package="sf"))$geometry
ee_as_ee(x)

#sfg
x <- read_sf(system.file("shape/nc.shp", package="sf"))$geometry[[1]]
ee_as_ee(x)

#sp
x <- shapefile(system.file("shape/nc.shp", package="sf"))
ee_as_ee(x)
}
}
